import './style.css';

const translations = {
  kk: {
    header: '–ë“±–ª Test –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ',
    main: '–ë“±–ª Main –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ üß†',
    message: '–ú–∏—Å—Å–∏—è —Ç“Ø–Ω –æ—Ä—Ç–∞—Å—ã–Ω–¥–∞ –±–∞—Å—Ç–∞–ª–∞–¥—ã.',
    footer: '“ö“±–ø–∏—è —Ç—ñ–ª —Ç–∞“£–¥–∞—É “õ–æ–ª–¥–∞–Ω–±–∞—Å—ã ¬© 2025',
  },
  ru: {
    header: '–≠—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Test',
    main: '–≠—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Main üß†',
    message: '–ú–∏—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å.',
    footer: '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ¬© 2025',
  },
  en: {
    header: 'This is Test component',
    main: 'This is Main component üß†',
    message: 'Mission starts at midnight.',
    footer: 'Secret language selection app ¬© 2025',
  },
};

const LanguageContext = createContext();

const LanguageProvider = ({ children }) => {
  const [language, setLanguage] = useState('kk');
  const changeLanguage = (lang) => setLanguage(lang);
  return (
    <LanguageContext.Provider value={{ language, changeLanguage }}>
      {children}
    </LanguageContext.Provider>
  );
};

const LanguageSelector = () => {
  const { language, changeLanguage } = useContext(LanguageContext);
  return (
    <select value={language} onChange={(e) => changeLanguage(e.target.value)} className="language-select">
      <option value="kk">“ö–∞–∑–∞“õ—à–∞</option>
      <option value="ru">–†—É—Å—Å–∫–∏–π</option>
      <option value="en">–ê“ì—ã–ª—à—ã–Ω—à–∞</option>
    </select>
  );
};

const Main = () => {
  const { language } = useContext(LanguageContext);
  const t = translations[language];

  return (
    <div className="main-box">
      <h3>{t.main}</h3>
      <p className="main-message">{t.message}</p>
      <LanguageSelector />
    </div>
  );
};

const Test = () => {
  const { language } = useContext(LanguageContext);
  const t = translations[language];

  return (
    <div className="test-box">
      <h2>{t.header}</h2>
      <Main />
    </div>
  );
};

const App = () => {
  const { language } = useContext(LanguageContext);
  const t = translations[language];

  return (
    <div className="app-container">
      <h1 className="title">HomeWork useContext</h1>
      <Test />
      <p className="footer">{t.footer}</p>
    </div>
  );
};

const RootApp = () => (
  <LanguageProvider>
    <App />
  </LanguageProvider>
);

export default RootApp;
